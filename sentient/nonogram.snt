function main () {
  array25<array25<bool>> grid;
  array25<array13<int6>> rowNumbers, columnNumbers;

  rowNumbers = removeZeros(rowNumbers);
  columnNumbers = removeZeros(columnNumbers);

  grid.validate!(rowNumbers);
  grid.transpose.validate!(columnNumbers);

  expose grid, rowNumbers, columnNumbers;
};

function removeZeros (numbersArray) {
  return numbersArray.map(function (numbers) {
    return numbers.reject(*zero?);
  });
};

function validate! (grid, rowNumbers) {
  rowNumbers.each(function^ (numbers, rowIndex) {
    cells = grid[rowIndex];

    previous = false;
    count = 0;
    index = -1;

    cells.each(function^ (cell) {
      edge = cell != previous;
      endOfRun = edge && !cell;

      tickOffNumberIf(endOfRun);

      count = edge ? 1 : count + 1;
      previous = cell;
    });

    tickOffNumberIf(previous);
    invariant index == numbers.length - 1;
  });
};

function^ tickOffNumberIf (condition) {
  index += condition ? 1 : 0;
  number, inBounds = numbers.get(index);
  invariant condition ? number == count : true;
};

main();